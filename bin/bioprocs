#!/usr/bin/env python
"""
The main program entrance for bioprocs binaries.
"""

import re
import inspect
import sys
import bioprocs
from os import path, listdir
from glob import glob
from collections import OrderedDict
from pyppl import PyPPL, utils, Channel
from pyppl.parameters import commands, HelpAssembler, Fore, Back, Style
from tempfile import gettempdir

METHODS   = None
SCRIPTS   = None
PROCESSES = None
MAIN      = None
# the length of process names in listing them
PROCLEN   = 50
# the length of the separator of each module in listing them
SEPLEN    = 86

ASSEMBLER = HelpAssembler(theme = 'default')

def substr_replace(s, starts, lengths, replace):
	if not isinstance(starts, (tuple, list)):
		starts = [starts]
	if not isinstance(lengths, (tuple, list)):
		lengths = [lengths]
	assert len(starts) == len(lengths)
	if not isinstance(replace, (tuple, list)):
		replace = [replace] * len(starts)

	delta = 0
	for i, start in enumerate(starts):
		# adjust starts
		s = s[:start + delta] + replace[i] + s[start + lengths[i] + delta:]
		delta += len(replace[i]) - lengths[i]
	return s

def highlight(origin, q, incase = True):
	# get all occurrences of q
	if incase:
		occurs = [m.start() for m in re.finditer(q.lower(), origin.lower())]
	else:
		occurs = [m.start() for m in re.finditer(q, origin)]
	lengths = [len(q)] * len(occurs)
	return substr_replace(origin, occurs, lengths, [
		'{}{}{}'.format(Fore.RED + Style.BRIGHT, origin[occur:occur+length], Style.RESET_ALL)
		for occur, length in zip(occurs, lengths)])

class Methods(object):

	@staticmethod
	def help(*cmds):
		"""
		Print help information of the command.
		"""
		main = Main.getMain()
		if not cmds:
			main.help(printNexit = True)
		
		obj = None
		cmd = cmds[0]
		if '.' in cmd:
			try:
				obj = Process(cmd)
			except ValueError:
				main.help(error = 'No such process: {!r}'.format(cmd), printNexit = True)
			obj.help(printNexit = True)
		else:
			methods = Main.getMethods()
			scripts = Main.getScripts()
			if cmd == 'help':
				main.help(printNexit = True)
			elif cmd in Main.getMethods():
				methods[cmd].help(printNexit = True)
			elif cmd in Main.getScripts():
				scripts[cmd].help(printNexit = True)
			else:
				main.help(error = 'No such method or script: {!r}'.format(cmd), printNexit = True)

	@staticmethod
	def list(*args, **kwargs):
		"""
		List available processes.
		Use "{prog} <module>" to list all processes of a module.
		@usage:
			{prog} [POSITIONAL ...]
		@params:
			`POSITIONAL`: The module names
		"""
		mod = args[0] if args else None
		if mod:
			procs = {mod: Main._getProcesses(mod)}
		else:
			procs = Main._getProcesses()
		
		ret = ['']
		for module, ps in procs.items():
			ret.append('-' * SEPLEN)
			moddoc = Main.getModuleDoc(module)
			if not moddoc:
				moddoc = ['[ Module not documented. ]']
			seplen = 0
			for i, mdoc in enumerate(moddoc):
				msg = module.ljust(PROCLEN) + mdoc if i == 0 else ' ' * PROCLEN + mdoc
				ret.append(ASSEMBLER.error(msg, with_prefix = False))
			
			for pname, proc in ps.items():
				pnname = ('    ' + module + '.' + pname + ': ').ljust(PROCLEN)
				ret.append(ASSEMBLER.prog(pnname) + ASSEMBLER.optdesc(proc.proc.desc))
			ret.append('')
		ret.append('-' * SEPLEN)

		sys.stdout.write('\n'.join(ret) + '\n')

	@staticmethod
	def params(*args, **kwargs):
		"""
		Show bioprocs.params items. 
		@usage:
			# Show all parameters
			{prog}
			# Show parameter details
			{prog} [param1][ param2][ param3 ...]
			# Get the value of a single parameter
			{prog} -get <param>
		@params:
			`get:PARAM`: Get the value of the parameter
			`query:KEYWORD`: Query parameters using the KEYWORD.
			`POSITIONAL`: The parameter names
		"""
		commands.params._hbald = False
		if commands.params._shouldPrintHelp(list(args) + list([
			commands.params._props['prefix'] + k for k in kwargs.keys()])):
			METHODS['params'].help(printNexit = True)

		if kwargs and 'get' in kwargs:
			arg = kwargs['get']
			sys.stdout.write(bioprocs.params[arg].value)
		elif kwargs and ('query' in kwargs or 'q' in kwargs):
			q = kwargs.get('query', kwargs.get('q')).lower()
			args = bioprocs.params.asDict().keys()
			ret = []
			for arg in sorted(args):
				param = bioprocs.params[arg]
				if  q not in arg.lower() and \
					not any(q in d.lower() for d in param.desc) and \
					q not in str(param.value):
					continue
				ret.append(ASSEMBLER.title('parameter') + ' ' + highlight(ASSEMBLER.prog(arg), q))
				for i, desc in enumerate(param.desc):
					if desc.upper().startswith('DEFAULT: '):
						continue
					if i == 0:
						ret.append(ASSEMBLER.prog('- desc : ') + highlight(ASSEMBLER.optdesc(desc), q))
					else:
						ret.append(' ' * 11 + ASSEMBLER.optdesc(desc))
				ret.append(ASSEMBLER.prog('- type : ') + param.type)
				ret.append(ASSEMBLER.prog('- value: ') + highlight(repr(param.value), q))
				ret.append('')

			sys.stdout.write('\n'.join(ret) + '\n')
		else:
			if not args:
				args = bioprocs.params.asDict().keys()
			
			ret = []
			for arg in sorted(args):
				ret.append(ASSEMBLER.title('parameter') + ' ' + ASSEMBLER.prog(arg))
				if not arg in bioprocs.params._params:
					ret.append(ASSEMBLER.error('  No such parameter: {}'.format(arg)))
				else:
					param = bioprocs.params[arg]
					for i, desc in enumerate(param.desc):
						if desc.upper().startswith('DEFAULT: '):
							continue
						if i == 0:
							ret.append(ASSEMBLER.prog('- desc : ') + ASSEMBLER.optdesc(desc))
						else:
							ret.append(' ' * 11 + ASSEMBLER.optdesc(desc))
					ret.append(ASSEMBLER.prog('- type : ') + param.type)
					ret.append(ASSEMBLER.prog('- value: ') + repr(param.value))
				ret.append('')
			sys.stdout.write('\n'.join(ret) + '\n')

class Command(object):

	def __init__(self, name, prog = path.basename(sys.argv[0])):
		self.prog      = prog
		self.name      = name
		self.assembler = HelpAssembler(prog, theme = ASSEMBLER.theme)
	
	@staticmethod
	def getblocks(docstr):
		lines = docstr.splitlines()
		blockname = None
		ret = {}
		for line in lines:
			if not line.strip(): continue
			namematch = re.match(r'^\s*@(\w+):', line)
			if not namematch and not blockname:
				blockname = 'doc'
			elif namematch:
				blockname = namematch.group(1)
				continue
			if not blockname in ret:
				ret[blockname] = []
			ret[blockname].append(line)
		return ret

	@staticmethod	
	def getitems(lines):
		ret = []
		for optline in lines:
			optline = optline.lstrip()
			nmatch  = re.match(r'(`)([:\.\w]+)\1\s*:\s*(.+)', optline)
			if nmatch:
				option  = nmatch.group(2)
				if ':' not in option:
					optname, opttype = option, ''
				else:
					optname, opttype = option.split(':', 1)
				optdoc1 = nmatch.group(3)
				if optname != 'POSITIONAL':
					optname = bioprocs.params._props['prefix'] + optname
				ret.append((optname, opttype, [optdoc1]))
			elif ret:
				ret[-1][-1].append(optline)
		return ret

	def getDocstr(self):
		raise NotImplementedError()

	def helpitems(self, blocks):
		raise NotImplementedError()
	
	def help(self, error = '', printNexit = False):
		ret = []
		if error:
			if not isinstance(error, list):
				error = [error]
			ret = [self.assembler.error(err.strip()) for err in error]
		ret += self.assembler.assemble(
			self.helpitems(Command.getblocks(self.getDocstr())), 
			self.prog
		)

		out = '\n'.join(ret) + '\n'
		if printNexit:
			sys.stderr.write(out)
			sys.exit(1)
		else:
			return out

	def run(self, *args, **kwargs):
		raise NotImplementedError()

class Method(Command):

	def getDocstr(self):
		method = getattr(Methods, self.name)
		docstr = ''
		if hasattr(method, '__doc__'):
			docstr = method.__doc__.strip()
		return docstr

	def helpitems(self, blocks):
		ret = OrderedDict()
		ret['description'] = ''
		for bname, blines in blocks.items():
			blines = [bline.strip() for bline in blines]
			if bname == 'doc':
				ret['description'] = blines
			elif bname == 'params':
				ret['options'] = self.getitems(blines)
			else:
				ret[bname] = blines
		return ret

	def run(self, *args, **kwargs):
		getattr(Methods, self.name)(*args, **kwargs)

class Script(Command):

	def __init__(self, name, prog = None):
		prog = prog or path.basename(sys.argv[0]) + ' ' + name
		super(Script, self).__init__(name, prog)
		self.script = path.join(path.dirname(__file__), 'bioprocs-' + self.name + '.py')

	def help(self, error = '', printNexit = False):
		c = utils.cmd.run([sys.executable, self.script, '--help'])
		h = c.stderr

		ret = []
		if error:
			if not isinstance(error, list):
				error = [error]
			ret = [self.assembler.error(err.strip()) for err in error]
		ret.extend(h.splitlines())
		out = '\n'.join(ret) + '\n'
		if printNexit:
			sys.stderr.write(out)
			sys.exit(1)
		else:
			return out

	def getDocstr(self):
		docstr = ''
		with open(self.script) as f:
			for line in f:
				if line.startswith('#!'):
					continue
				if line.startswith('#'):
					docstr = line[1:].strip()
					break
		return docstr

	def helpitems(self, blocks):
		return {}

	def run(self, *args, **kwargs):
		utils.cmd.run(
			[sys.executable, self.script] + sys.argv[2:], 
			stdout = sys.stdout, 
			stderr = sys.stderr,
			stdin  = sys.stdin
		)

class Process(Command):

	HELPOPTS = ['h', 'H']

	def __init__(self, name, prog = None):
		prog = prog or path.basename(sys.argv[0]) + ' ' + name
		super(Process, self).__init__(name, prog)
		self.module, self.procname = self.name.split('.', 1)
		self.procfile = path.join(path.dirname(bioprocs.__file__), self.module + '.py')
		if not path.isfile(self.procfile):
			raise ValueError('No such module: {}'.format(self.module))
		
		try:
			self.proc = getattr(
				__import__('bioprocs.' + self.module, fromlist = ['bioprocs']), 
				self.procname
			)
		except AttributeError:
			raise AttributeError('Module {!r} does not have such process: {!r}'.format(self.module, self.procname))

	def getDocstr(self):
		with open(self.procfile) as f:
			content = f.read()

		regex  = re.compile(
			r'(\"\"\"|\'\'\')\s+@name:\s+' + self.procname + r'\s+@description:\s+([\s\S]+?)\1'
		)
		docstr = regex.search(content)
		
		if not docstr or 'Alias of' in docstr.group(2):
			alias = docstr.group(2) if docstr else None
			docstr = ''
			docstr += '@name:\n'
			docstr += '	{}\n'.format(self.procname)
			docstr += '@description:\n'
			docstr += '	{}\n'.format(self.proc.desc)
			if alias is not None:
				docstr += '	' + alias.strip() + ' (of module {})\n'.format(self.module)
			docstr += '@input:\n'
			
			inputs = self.proc.config['input']
			if isinstance(inputs, dict):
				inputs = inputs.keys()
			elif not isinstance(inputs, list):
				inputs = utils.split(inputs, ',')
			for inkey in inputs:
				if ':' in inkey:
					inname, intype = inkey.split(':', 1)
				else:
					inname, intype = inkey, ''
				docstr += '\t`{}{}`: [ No description. ]\n'.format(
					inname, ':' + intype if intype else ''
				)
			docstr += '@output:\n'

			outputs = self.proc.config['output']
			if isinstance(outputs, dict):
				outputs = ['{}:{}'.format(k, v) for k, v in outputs.items()]
			elif not isinstance(outputs, list):
				outputs = utils.split(outputs, ',')
			for outkey in outputs:
				outname, outtype, outval = outkey.split(':', 2)
				docstr += '\t`{}{}`: Default: {}\n'.format(
					outname,
					':' + outtype if outtype else '',
					outval
				)

			if self.proc.args:
				docstr += '@args:\n'
				for key, val in self.proc.args.items():
					docstr += '	`{}`: Default: {!r}\n'.format(key, val)
		else:
			docstr = docstr.group(0)[3:-3]

		return docstr

	def helpitems(self, blocks):
		
		def tokendefault(desc, token):
			return [desc[:desc.index(token)] + HelpAssembler().theme['default'] + desc[desc.index(token):] + Style.RESET_ALL]

		def sepdefault(desc):
			desc = desc.replace('    ', '  ').replace('\t', '  ')
			defaults = ['Default:', 'DEFAULT:']
			if defaults[0] in desc:
				return tokendefault(desc, defaults[0])
			elif defaults[1] in desc:
				return tokendefault(desc, defaults[1])
			else:
				return [desc]

		def stripL(line):
			if line.startswith('    '):
				return line[4:]
			elif line.startswith('\t'):
				return line[1:]
			return line.lstrip()

		def splitNameLine(line):
			try:
				_, name, desc = line.rstrip().split('`', 2)
			except ValueError:
				raise ValueError('Malformat documentation, name has to be wrapped by "`":\n{}'.format(line))
			name, t = name.strip(), ''
			if ':' in name:
				name, t = name.split(':', 1)
			return name, t, sepdefault(desc.lstrip(': '))

		ret    = OrderedDict()
		prefix = bioprocs.params._props['prefix']
		ret['name']        = [n.strip() for n in blocks.get('name', [self.name])]
		ret['description'] = [desc.strip() for desc in blocks.get('description', [])]

		# inputs
		inputs = blocks.get('input', [])
		retins = []
		for iline in inputs:
			iline = stripL(iline)
			if iline.startswith('`'):
				name, t, desc = splitNameLine(iline)
				retins.append(('{}i.{}'.format(prefix, name), t, desc))
			else:
				retins[-1][-1].extend(sepdefault(iline.rstrip()))
		ret['input'] = retins

		# outputs
		outputs = blocks.get('output', [])
		retouts = []
		for oline in outputs:
			oline = stripL(oline)
			if oline.startswith('`'):
				name, t, desc = splitNameLine(oline)
				retouts.append(('{}o.{}'.format(prefix, name), t, desc))
			else:
				retouts[-1][-1].extend(sepdefault(oline.rstrip()))
				
		ret['output (basename only, template applied)'] = retouts
		
		# args
		args = blocks.get('args')
		if args:
			retargs = []
			argname = None
			for argline in args:
				argline = stripL(argline)
				if argline.startswith('`'):					
					argname, _, argdesc = splitNameLine(argline)
					retargs.append(('{}args.{}'.format(prefix, argname), '', argdesc))
				else:
					retargs[-1][-1].extend(sepdefault(argline.rstrip()))
			ret['args'] = retargs

		ret['process attributes'] = [
			(
				'{}<xxx>'.format(prefix), 
				'', 
				'Such as {prefix}forks, {prefix}exdir, {prefix}cache, etc.'.format(prefix = prefix)
			)
		]

		ret['pipeline configuration'] = [
			(
				'{}config.<subconfig>[.subconfig]'.format(prefix), 
				'', 
				'Such as {prefix}config._log.file'.format(prefix = prefix)
			)
		]
		ret['other arguments'] = [
			(', '.join(prefix + h for h in Process.HELPOPTS), '', 'Print this help page.')
		]
		return ret

	def createPipeline(self, **kwargs):

		config = {
			'_log': {'file': None}, 
			'default': {
				'ppldir': path.join(gettempdir(), 'bioprocs.workdir')
			}
		}
		
		# get input keys
		inkeys = self.proc.config['input']
		if isinstance(inkeys, dict):
			inkeys = inkeys.keys()
		elif not isinstance(inkeys, list):
			inkeys = utils.split(inkeys, ',')

		inkeys = {
			inkey.split(':')[0]: (
				inkey.split(':')[1] if ':' in inkey else 'var'
			) for inkey in inkeys
		}
		indata  = {
			'{}:{}'.format(inkey, intype): ''
			for inkey, intype in inkeys.items()
		}

		outdata = OrderedDict()
		outputs = self.proc.config['output']
		if isinstance(outputs, dict):
			outputs = ['{}:{}'.format(k, v) for k, v in outputs.items()]
		elif not isinstance(outputs, list):
			outputs = utils.split(outputs, ',')
		
		for outkey in outputs:
			parts = utils.split(outkey, ':')
			if len(parts) == 2:
				parts.insert(1, 'var')
			outdata['{}:{}'.format(parts[0], parts[1])] = parts[2]
		outkeys = {outkey.split(':')[0]:outkey.split(':')[1] for outkey in outdata.keys()}

		for key, val in kwargs.items():
			if key in Process.HELPOPTS:
				self.help(printNexit = True)

			# proc attributes
			if '.' not in key:
				setattr(self.proc, key, val)
				continue

			kparts = key.split('.')
			t = kparts.pop(0)
			if t == 'in' or t == 'i': # in will be deprecated
				inkey = kparts[0]
				if not inkey in inkeys:
					self.help('Unknown input key "{}" for "{}", expect [{}]'.format(inkey, self.name, ', '.join(inkeys)), printNexit = True)
				indata[inkey + ':' + inkeys[inkey]] = Channel.create(val)
			elif t == 'out' or t == 'o': # in will be deprecated
				outkey = kparts[0]
				if not outkey in outkeys:
					self.help('Unknown output key "{}" for "{}", expect [{}]'.format(outkey, self.name, ', '.join(outkeys)), printNexit = True)
				outdata[outkey + ':' + outkeys[outkey]] = val
			elif t == 'args' or t == 'config':
				lastpart = kparts.pop(-1)
				aval = self.proc.args if t == 'args' else config
				for k in kparts:
					if k not in aval:
						aval[k] = {}
					aval = aval[k]
				if lastpart not in aval:
					lastpart = lastpart.replace('-', '.')
				aval[lastpart] = val
			else:
				self.help('Unknown argument: %s' % key, printNexit = True)

		if not any([bool(it) for it in indata.values()]):
			self.help('No input specified.', printNexit = True)
		
		self.proc.input  = indata
		self.proc.output = outdata
		return config

	def run(self, *args, **kwargs):
		config = self.createPipeline(**kwargs)
		PyPPL(config).start(self.proc).run()

class Main(object):

	@staticmethod
	def getModuleDoc(module):
		ret     = []
		pdir    = path.dirname(bioprocs.__file__)
		modfile = path.join(pdir, module + '.py')
		with open(modfile, 'r') as f:
			docstarted = None
			for line in f:
				if line.startswith('#!'): continue
				if line.startswith('#') and (docstarted or docstarted is None):
					docstarted = True
					r = line[1:].strip()
					ret.append(r)
				elif docstarted:
					docstarted = False
		return ret

	@staticmethod
	def getMethods():
		global METHODS
		if METHODS: return METHODS
		METHODS = {
			mname: Method(mname, path.basename(sys.argv[0]) + ' ' + mname)
			for mname, _ in inspect.getmembers(
				Methods, 
				predicate = inspect.isfunction
			)
			if not mname.startswith('_')
		}
		return METHODS

	@staticmethod
	def getScripts():
		global SCRIPTS
		if SCRIPTS: return SCRIPTS
		sglob   = path.join(path.dirname(__file__), 'bioprocs-*.py')
		scnames = [path.basename(script)[9:-3] for script in glob(sglob)]
		SCRIPTS = {scname: Script(scname) for scname in scnames}
		return SCRIPTS

	@staticmethod
	def _getProcesses(module = None):
		global PROCESSES
		pdir = path.dirname(bioprocs.__file__)
		if module:
			modfile = path.join(pdir, module + '.py')
			if not path.isfile(modfile):
				raise ImportError('No such module: %s' % module)

			pymodule = __import__('bioprocs.%s' % module, fromlist = ['bioprocs'])
			procs    = {
				proc: Process(module + '.' + proc) 
				for proc in dir(pymodule) 
				if proc[0] == 'p' and (proc[1].isdigit() or proc[1].isupper())
			}

			return procs
		else:
			if PROCESSES: return PROCESSES
			modules = set([path.splitext(mfile)[0] for mfile in listdir(pdir)])
			modules = [
				mod for mod in modules 
				if not mod.startswith('_') and mod not in ['utils', 'scripts', 'wxs']
			]
			PROCESSES   = {
				mod: Main._getProcesses(mod)
				for mod in modules
			}
			return PROCESSES

	def __init__(self, argv = None):
		self.command, self.args = commands.parse(arbi = True)

	def run(self):

		obj = None
		if '.' in self.command:
			try:
				obj = Process(self.command)
			except ValueError:
				self.help(error = 'No such process: {!r}'.format(self.command), printNexit = True)
		else:
			methods = Main.getMethods()
			scripts = Main.getScripts()
			if not self.command:
				self.help(printNexit = True)
			elif self.command in methods:
				obj = methods[self.command]
			elif self.command in scripts:
				obj = scripts[self.command]
			else:
				try:
					processes = Main._getProcesses(self.command)
					msg  = 'No such method or script: {!r}. \n'.format(self.command)
					msg += '    I guess it\'s a module, listing its processes:\n'
					sys.stderr.write(ASSEMBLER.warning(msg))
					obj = methods['list']
					self.args['_'] = [self.command]
				except ImportError:
					msg  = 'No such method, script or module: {!r}. \n         '.format(self.command)
					self.help(error = msg, printNexit = True)

		args = self.args.copy()
		del args['_']
		obj.run(*self.args['_'], **args)

	def help(self, error = '', printNexit = False):
		commands.help(error, printNexit)

	@staticmethod
	def helpx(helpitems):
		del helpitems['commands']
		getdesc = lambda docstr: [
			line.lstrip('\t') for line in docstr.strip().split('@')[0].split('\n') if line.strip()
		]
		helpitems['methods'] = [
			(key, '' if key != 'help' else 'command', getdesc(val.getDocstr())) for key, val in Main.getMethods().items()
		]
		helpitems['scripts'] = [
			(key, '', getdesc(val.getDocstr())) for key, val in Main.getScripts().items()
		]
		helpitems['processes'] = [
			('<module.proc>', '', 'Run process as a command line tool.')
		]
		return helpitems

	@staticmethod
	def getMain():
		global MAIN
		if MAIN: return MAIN
		MAIN = Main()
		return MAIN
	
if __name__ == '__main__':
	commands._desc  = 'Command line utilities of bioprocs.'
	commands._helpx = Main.helpx
	Main.getMain().run()

