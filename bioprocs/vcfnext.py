from pyppl import Proc, Box
from . import params, rimport
from .utils import fs2name
# Next-step processing after VCF file being generated.
from . import delefactory, procfactory
from modkit import Modkit
Modkit().delegate(delefactory())

@procfactory
def _pVcfStatsPlot():
	"""
	@name:
		pVcfStatsPlot
	@description:
		Convert csvstat file from snpEff to R-readable matrix and plot them.
	@input:
		`indir:file`: The directory containing the csv stat files from `snpEff ann`
	@output:
		`outdir:dir`: The output directory
	@args:
		`chroms`:     The chromsome filter. Default: "" (all chroms)
		- Note: snpEff csvstat file has no "chr" prefix
	"""
	pVcfStatsPlot                  = Proc(desc = 'Convert csvstat file from snpEff to R-readable matrix and plot them.')
	pVcfStatsPlot.input            = "indir:file"
	pVcfStatsPlot.output           = "outdir:dir:{{i.indir | fn}}-{{job.index}}.statplots"
	pVcfStatsPlot.args.chroms      = ""
	pVcfStatsPlot.args.Rscript     = params.Rscript.value
	pVcfStatsPlot.args.devpars     = Box({'res':300, 'width':2000, 'height':2000})
	pVcfStatsPlot.args.histplotggs = []
	pVcfStatsPlot.args.boxplotggs  = []
	pVcfStatsPlot.lang             = params.python.value
	pVcfStatsPlot.script           = "file:scripts/vcfnext/pVcfStatsPlot.py"
	return pVcfStatsPlot

@procfactory
def _pGTMatAddRs():
	"""
	@name:
		pGTMatAddRs
	@description:
		Add rs id to a genotype matrix
	@input:
		`infile:file`: The input genotype matrix, columns are samples, rows are mutations in format:
			- `<chr>_<pos>_<ref>_<alt>` or `<chr>_<pos>_<name>_<ref>_<alt>`
			- has to be sorted by coordinates.
			- `chromsomes` have to be in order of `args.chrorder`
	@output:
		`outfile:file`: The output genotype matrix. Row names will turn into:
			- `<chr>_<pos>_<rs>_<ref>_<alt>`
	@args:
		`dbsnp`: the dbsnp vcf file used to annotation the snps.
			- assume sorted by coordinates
			- `chromsomes` have to be in order of `args.chrorder`
		`notfound`: What to used if RS id not found. Default: `NOVEL`
			- `None/Fase` to skip to record
		`exist`: What if RS id exists? Default: `keep`
			- `keep`: Keep the RS ID and skip seeking
			- `force`: Force using the RS ID being found to replace the old one.
		`chrorder`: The chromsome order. Default: `<params.chrorder>`
	"""
	pGTMatAddRs               = Proc(desc = "Add rs id to a genotype matrix")
	pGTMatAddRs.input         = 'infile:file'
	pGTMatAddRs.output        = 'outfile:file:{{i.infile | bn}}'
	pGTMatAddRs.args.dbsnp    = params.dbsnp_all.value
	pGTMatAddRs.args.chrorder = params.chrorder.value
	pGTMatAddRs.args.notfound = 'NOVEL'
	pGTMatAddRs.args.exist    = 'keep'
	pGTMatAddRs.lang          = params.python.value
	pGTMatAddRs.script        = "file:scripts/vcfnext/pGTMatAddRs.py"
	return pGTMatAddRs

@procfactory
def _pGTMat2Plink():
	"""
	@name:
		pGTMat2Plink
	@description:
		Convert a genotype matrix to plink binary files
	@input:
		`infile:file`: The genotype matrix, probably generated by `pVcf2GTMat`
		`metafile:file`: The metadata file.
			- column names could be `['FID', 'IID', 'PID', 'MID', 'Sex', 'Pheno']`, see plink's `ped` format
			- row names are samples
	@output:
		`outdir:dir`: The output directory. Default: `{{i.infile | fn}}.plink`
	@args:
		`plink`:   The path to `plink`
		`keeptxt`: Keep the text files (.ped and .map) or not. Default: `False`
	@requires:
		`plink 1.x`
	"""
	pGTMat2Plink              = Proc(desc = 'Convert a genotype matrix to plink binary files')
	pGTMat2Plink.input        = 'infile:file, metafile:file'
	pGTMat2Plink.output       = 'outdir:dir:{{i.infile | fn}}.plink'
	pGTMat2Plink.args.plink   = params.plink.value
	pGTMat2Plink.args.keeptxt = False
	pGTMat2Plink.args.chrmaps = {'X': 23, 'Y': 24, 'XY': 25, 'M': 26, 'MT': 26}
	pGTMat2Plink.lang         = params.python.value
	pGTMat2Plink.script       = "file:scripts/vcfnext/pGTMat2Plink.py"
	return pGTMat2Plink

@procfactory
def _pGTMat2Bed():
	"""
	@name:
		pGTMat2Bed
	@description:
		Convert a genotype matrix to a bed file containing the coordinates of the mutations
	@input:
		`infile:file`: The genotype matrix. Row names must follow `<chr>_<pos>_<rsid>_<ref>_<alt>`
	@output:
		`outfile:file`: The output bed file. Default: `outfile:file:{{i.infile | fn}}.bed`
	@args:
		`ncol`  : How many columns of bed to output. Default: `6`.
			- Possible values: 3, 6, 8, 66, 88
			- If `8`, then reference and alternative alleles will be 7th and 8th column
			- If `66`, then genotypes will be attached to BED6
			- If `88`, then genotypes will be attached to `ncol = 8`
		`name`  : Use the neat name (usually rsid) or full name (row names). Default: `neat`
		`inopts`: Options to read the input file. Default: `Box(cnames = True)`
	"""
	pGTMat2Bed             = Proc(desc = 'Convert a genotype matrix to bed file')
	pGTMat2Bed.input       = 'infile:file'
	pGTMat2Bed.output      = 'outfile:file:{{i.infile | fn}}.bed'
	pGTMat2Bed.args.inopts = Box(cnames = True)
	pGTMat2Bed.args.ncol   = 6
	pGTMat2Bed.args.name   = 'neat' # full
	pGTMat2Bed.lang        = params.python.value
	pGTMat2Bed.script      = "file:scripts/vcfnext/pGTMat2Bed.py"
	return pGTMat2Bed

@procfactory
def _pCallRate():
	"""
	@name:
		pCallRate
	@description:
		Calculate sample/snp call rate from single sample vcfs
	@input:
		`indir:file`:     The dir containing the vcfs
	@output:
		`outsample:file`: The report of call rate for each sample
		`figsample:file`: The bar chat of sample call rates
		`outsnp:file`:    The report of call rate for each snp
		`figsnp:file`:    The bar chat of snp call rates
	"""
	pCallRate                  = Proc()
	pCallRate.input            = "indir:file"
	pCallRate.output           = "outdir:dir:{{ i.indir | fn }}.callrate"
	pCallRate.args.histplotggs = []
	pCallRate.args.devpars     = Box({'res':300, 'width':2000, 'height':2000})
	pCallRate.lang             = params.Rscript.value
	pCallRate.script           = "file:scripts/vcfnext/pCallRate.r"
	return pCallRate

@procfactory
def _pCepip():
	"""
	@name:
		pCepip
	@description:
		Run CEPIP.
	@input:
		`infile:file`: The input file (vcf or avinput)
	@output:
		`outfile:file`: The cepip result file
	@args:
		`cepip`:    The path of cepip
		`cell` :    The related cell line
		`params`:   Other params for cepip
	@requires:
		[`cepip`](http://jjwanglab.org/cepip/)
	"""
	pCepip                     = Proc(desc = 'Run cepip for input mutations.')
	pCepip.input               = "infile:file"
	pCepip.output              = "outfile:file:{{i.infile | fn}}.cepip.txt"
	pCepip.args.cepip          = params.cepip.value
	pCepip.args.cell           = ""
	pCepip.args.params         = Box()
	pCepip.lang                = params.python.value
	pCepip.script              = "file:scripts/vcfnext/pCepip.py"
	return pCepip

@procfactory
def _pMutSig():
	"""
	@name:
		pMutSig
	@description:
		MutSig stands for "Mutation Significance".  MutSig analyzes lists of mutations discovered in DNA sequencing, to identify genes that were mutated more often than expected by chance given background mutation processes.
		For more information, see Lawrence, M. et al. Mutational heterogeneity in cancer and the search for new cancer-associated genes. Nature 499, 214-218 (2013).
		See [dcumentation](http://archive.broadinstitute.org/cancer/cga/mutsig_run)
	@input:
		`infile:file`: mutation table
	@output:
		`outdir:dir`: The output directory
	@args:
		`mutsig` : The path to `run_MutSigCV.sh`, default: 'mutsig'
		`mcr`    : The Matlab MCR path
		`cvrg`   : coverage table
		`cvrt`   : covariates table
		`mutdict`: mutation_type_dictionary_file
		`chrdir` : chr_files_hg18 or chr_files_hg19
	@requires:
		[MutSig](http://archive.broadinstitute.org/cancer/cga/mutsig_download)
	"""
	pMutSig              = Proc(desc = 'Run MutSig.')
	pMutSig.input        = 'infile:file'
	pMutSig.output       = "outdir:dir:{{i.infile | fn}}.mutsig"
	pMutSig.args.cvrg    = params.mutsig_cvrg.value
	pMutSig.args.cvrt    = params.mutsig_cvrt.value
	pMutSig.args.mutdict = params.mutsig_mutdict.value
	pMutSig.args.chrdir  = params.mutsig_chrdir.value
	pMutSig.args.mutsig  = params.mutsig.value
	pMutSig.args.mcr     = params.mcr.value
	pMutSig.script       = "file:scripts/vcfnext/pMutSig.bash"
	return pMutSig

@procfactory
def _pMafLiftover():
	"""
	@name:
		pMafLiftover
	@description:
		Liftover maf file from one assembly to another
	@input:
		`infile:file`: The input maf file
	@output:
		`outfile:file`: The output maf file
	@args:
		`liftover`: The liftOver program.
		`lochain`:  The liftOver chain file.
		`genome`:   The target genome.
	@requires:
		liftOver from UCSC
	"""
	pMafLiftover               = Proc(desc = 'Liftover a maf file from one assembly to another')
	pMafLiftover.input         = 'infile:file'
	pMafLiftover.output        = 'outfile:file:{{i.infile | fn | lambda x: x if x.endswith(".maf") else x + ".maf"}}'
	pMafLiftover.args.liftover = params.liftover.value
	pMafLiftover.args.lochain  = params.lochain.value
	pMafLiftover.args.genome   = params.genome.value
	pMafLiftover.lang          = params.python.value
	pMafLiftover.script        = "file:scripts/vcfnext/pMafLiftOver.py"
	return pMafLiftover


@procfactory
def _pMafMerge():
	"""
	@name:
		pMafMerge
	@description:
		Merge maf files.
	@input:
		`infiles:files`: The maf files
	@output:
		`outfile:file`: The merged maf file
	@args:
		`excols`: How to deal with extra columns other than 34 standard columns from TCGA.
			- merge(default): Merge the columns, if one not exists, fill with an empty string.
			- discard: Just discard the extra columns, with only 34 columns left. So you can also put just one maf file in the indir with some columns missed to fill it with standard columns.
	"""
	pMafMerge              = Proc(desc = 'Merge maf files.')
	pMafMerge.input        = 'infiles:files'
	pMafMerge.output       = 'outfile:file:{{i.infiles | fs2name}}.maf'
	pMafMerge.args.excols  = 'merge' # discard
	pMafMerge.envs.fs2name = fs2name
	pMafMerge.lang         = params.python.value
	pMafMerge.script       = "file:scripts/vcfnext/pMafMerge.py"
	return pMafMerge

@procfactory
def _pMaf2Mat():
	"""
	@name:
		pMaf2Mat
	@description:
		Convert maf file to a gene(row)-sample(column) matrix
	@input:
		`infile:file`: The input file
	@output:
		`outfile:file`: The output matrix
	@args:
		`mutypes`: Provide manual list of variant classifications to be counted, only effective when `args.binary = False`. Default: `None` (all counted)
		`binary` : Just generate a binary matrix instead of a count matrix. Default: `False`
		`na`: What value to use for no mutations reported on a gene. Default: `0`
		`samfn`  : A function (in r) to transform the sample names. Default: `function(sample) sample`
	"""
	pMaf2Mat              = Proc(desc = 'Convert maf file to a gene-based mutation matrix')
	pMaf2Mat.input        = 'infile:file'
	pMaf2Mat.output       = 'outfile:file:{{i.infile | fn}}.mat.txt'
	pMaf2Mat.args.binary  = False
	pMaf2Mat.args.mutypes = None
	pMaf2Mat.args.na      = 0
	pMaf2Mat.args.samfn   = 'function(sample) sample'
	pMaf2Mat.lang         = params.Rscript.value
	pMaf2Mat.script       = "file:scripts/vcfnext/pMaf2Mat.r"
	return pMaf2Mat

@procfactory
def _pMaftools():
	"""
	@name:
		pMaftools
	@description:
		Use maftools to draw plots.
	@input:
		`indir:file`: The input directory or a single maf file. A directory could contain:
			- `*.maf` or `*.maf.gz` file (required)
			- `*.annot.tsv` or `*.annot.txt` file (see: https://github.com/PoisonAlien/maftools/blob/master/inst/extdata/tcga_laml_annot.tsv)
			- `all_lesions.conf_*.txt`: Gistic cnv data
			- `amp_genes.conf_*.txt`: Gistic cnv data
			- `del_genes.conf_*.txt`: Gistic cnv data
			- `scores.gistic`: Gistic cnv data
			- `*.seg.txt`: CBS segments data
			- `*sig_genes.txt` or `*sig_genes.txt.gz`: Mutsig results, to do pancancer somparison.
	@output:
		`outdir:dir`: The output directory
	@args:
		`ngenes` : Top number of genes to plot for some plots. Default: `10`
		`mutypes`: Provide manual list of variant classifications to be considered as non-synonymous. Rest will be considered as silent variants. Default: `["Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Translation_Start_Site","Nonsense_Mutation", "Nonstop_Mutation", "In_Frame_Del","In_Frame_Ins", "Missense_Mutation"]`
		`isTCGA`:  If the maf file is from TCGA? Default: `False`
		`ref`   :  The reference file for signature plot.
		`plot`  :  Which plots to plot.
			- Default:
			```python
			Box(
				summary        = True,
				oncoplot       = True,
				oncostrip      = True,
				titv           = True,
				lollipop       = True,
				cbsseg         = True,
				rainfall       = True,
				tcgacomp       = True,
				vaf            = True,
				genecloud      = True,
				gisticGenome   = True,
				gisticBubble   = True,
				gisticOncoplot = True,
				somInteraction = True,
				oncodrive      = True,
				pfam           = True,
				pancan         = True,
				survival       = True,
				heterogeneity  = True,
				signature      = True,
			)
			```
		`params`:  The extra parameters for each plot function.
			- Default:
			```python
			Box(
				summary        = Box(rmOutlier = True, addStat = 'median', dashboard = True),
				oncoplot       = Box(),
				oncostrip      = Box(),
				titv           = Box(),
				lollipop       = Box(AACol = 'Protein_Change'),
				cbsseg         = Box(labelAll = True),
				rainfall       = Box(detectChangePoints = True),
				tcgacomp       = Box(),
				vaf            = Box(flip = True),
				genecloud      = Box(minMut = 3),
				gisticGenome   = Box(markBands = 'all'),
				gisticBubble   = Box(),
				gisticOncoplot = Box(),
				somInteraction = Box(),
				oncodrive      = Box(AACol = 'Protein_Change', minMut = 5, pvalMethod = 'zscore', fdrCutOff = 0.1, useFraction = True),
				pfam           = Box(AACol = 'Protein_Change'),
				pancan         = Box(qval = 0.1, label = 1, normSampleSize = True),
				survival       = Box(),
				heterogeneity  = Box(),
				signature      = Box(nTry = 6, plotBestFitRes = False),
			)
			```
		`devpars`:  The parameters for plot device. Default: `Box(res = 300, height = 2000, width = 2000)`
		`nthread`:  Number of threads used for multiple plot of one type. Default: `1`
	@requires:
		[Maftools](https://bioconductor.org/packages/devel/bioc/vignettes/maftools/inst/doc/maftools.html)
	"""
	pMaftools              = Proc(desc = 'Use maftools to draw plots.')
	pMaftools.input        = 'indir:file'
	pMaftools.output       = 'outdir:dir:{{i.indir | fn}}.maftools'
	pMaftools.args.ngenes  = 10
	pMaftools.args.isTCGA  = False
	pMaftools.args.genome  = params.genome.value # for signature
	pMaftools.args.mutypes = ["Frame_Shift_Del", "Frame_Shift_Ins", "Splice_Site", "Translation_Start_Site","Nonsense_Mutation", "Nonstop_Mutation", "In_Frame_Del","In_Frame_Ins", "Missense_Mutation"]
	pMaftools.args.plot    = Box(
		summary        = True,
		oncoplot       = True,
		oncostrip      = True,
		titv           = True,
		lollipop       = True,
		cbsseg         = True,
		rainfall       = True,
		tcgacomp       = True,
		vaf            = True,
		genecloud      = True,
		gisticGenome   = True,
		gisticBubble   = True,
		gisticOncoplot = True,
		somInteraction = True,
		oncodrive      = True,
		pfam           = True,
		pancan         = True,
		survival       = True,
		heterogeneity  = True,
		signature      = True,
	)
	pMaftools.args.params  = Box(
		summary        = Box(rmOutlier = True, addStat = 'median', dashboard = True),
		oncoplot       = Box(),
		oncostrip      = Box(),
		titv           = Box(),
		lollipop       = Box(),
		cbsseg         = Box(labelAll = True),
		rainfall       = Box(detectChangePoints = True),
		tcgacomp       = Box(),
		vaf            = Box(flip = True),
		genecloud      = Box(minMut = 3),
		gisticGenome   = Box(markBands = 'all'),
		gisticBubble   = Box(),
		gisticOncoplot = Box(),
		somInteraction = Box(),
		oncodrive      = Box(minMut = 5, pvalMethod = 'zscore', fdrCutOff = 0.1, useFraction = True),
		pfam           = Box(),
		pancan         = Box(qval = 0.1, label = 1, normSampleSize = True),
		survival       = Box(),
		heterogeneity  = Box(),
		signature      = Box(nTry = 6, plotBestFitRes = False),
	)
	pMaftools.args.devpars = Box(res = 300, height = 2000, width = 2000)
	pMaftools.args.nthread = 1
	pMaftools.envs.rimport = rimport
	pMaftools.lang         = params.Rscript.value
	pMaftools.script       = "file:scripts/vcfnext/pMaftools.r"
	return pMaftools

@procfactory
def _pMutationSigs():
	"""
	@name:
		pMutationSigs
	@description:
		Find similar COSMIC mutation signatures for MAF file
		using https://github.com/pwwang/deconstruct_sigs_py
	@input:
		`infile:file`: The input maf file.
	@output:
		`outdir:dir`: The output directory
	@args:
		`font_family`: Font family for plotting.
		`font_weight`: Font weight for plotting.
		`sig_cutoff` : Significance cutoff for signatures.
		`err_thres`  : The threshold to top the iteration.
		`ref`        : The reference genome.
	"""
	pMutationSigs                  = Proc(desc = 'Find similar COSMIC mutation signatures for MAF file.')
	pMutationSigs.input            = 'infile:file'
	pMutationSigs.output           = 'outdir:dir:{{i.infile | fn2}}.signature'
	pMutationSigs.args.font_family = 'Arial'
	pMutationSigs.args.font_weight = 'bold'
	pMutationSigs.args.sig_cutoff  = 0.05
	pMutationSigs.args.err_thres   = 1e-3
	pMutationSigs.args.ref         = params.ref.value
	pMutationSigs.lang             = params.python.value
	pMutationSigs.script           = "file:scripts/vcfnext/pMutationSigs.py"
	return pMutationSigs

@procfactory
def _pSnpEff():
	"""
	@name:
		pSnpEff
	@description:
		This is the default command. It is used for annotating variant filed (e.g. VCF files).
	@input:
		`infile:file`:  The input file
	@output:
		`outdir:file`: The directory containing output anntated file, snpEff_genes.txt and snpEff_summary.html
	@args:
		`snpEff`:       The snpEff executable, default: "snpEff"
		`params`:    Other parameters for `snpEff`, default: "-Xms1g -Xmx4g -v"
		`genome`:    The genome used for annotation, default: "hg19"
		`informat`:  The format of input file [vcf or bed], default: "vcf"
		`outformat`: The format of output file [vcf, gatk, bed, bedAnn], default: "vcf"
		`csvStats`:  Whether to generate csv stats file, default: True.
		`htmlStats`: Whether to generate the html summary file, default: False.
		`javamem`:   The memory to use. Default: '-Xms1g -Xmx8g'
	@requires:
		[snpEff](http://snpeff.sourceforge.net/SnpEff_manual.html)
	"""
	pSnpEff = Proc()
	pSnpEff.input  = "infile:file"
	pSnpEff.output = "outdir:dir:{{infile | fn}}.snpeff"
	pSnpEff.args   = { "snpEff": "snpEff", "javamem": "-Xms1g -Xmx8g", "genome": "hg19", "informat": "vcf", "outformat": "vcf", "csvStats": True, "htmlStats": False, "params": "" }
	pSnpEff.script = """
	csvfile="{{outdir}}/{{infile | fn}}.csvstat"
	sumfile="{{outdir}}/{{infile | fn}}.html"
	outfile="{{outdir}}/{{infile | fn}}.snpEff.vcf"
	csvStats=""
	if [[ "{{args.csvStats}}" == "True" ]]; then
		csvStats="-csvStats \\"$csvfile\\""
	fi
	stats=""
	if [[ "{{args.htmlStats}}" == "True" ]]; then
		stats="-stats \\"$sumfile\\""
	fi
	echo {{args.snpEff}} {{args.javamem}} -i {{args.informat}} -o {{args.outformat}} $csvStats $stats {{args.params}} {{args.genome}} "{{infile}}"
	{{args.snpEff}} {{args.javamem}} -i {{args.informat}} -o {{args.outformat}} $csvStats $stats {{args.params}} {{args.genome}} "{{infile}}" > "$outfile"
	"""
	return pSnpEff

@procfactory
def _pDToxoG():
	"""
	@name:
		pDToxoG
	@description:
		Run D-ToxoG on MAF files with columns listed at:
		https://software.broadinstitute.org/cancer/cga/dtoxog
		However,`i_picard_oxoQ` is required but not documented. This process
		will try to put 0's for the field to let the program run.
	@input:
		`infile:file`: The input maf file
	@output:
		`outfile:file`: The output maf file. Default: `{{i.infile | fn}}.dtoxog.maf`
			- with extra columns added:
			- `pox` --  p-value that the call is actually an artifact
			- `qox` --  false detection rate score.
			- `pox_cutoff` --  minimum pox score for artifact.
			- `isArtifactMode`:
				- Variant is C>A, G>T: 1
				- Variant is not C>A or G>T: 0
			- `oxoGCut`:
				- Variant is marked as artifact: 1
				- Variant is not an artifact: 0
	@args:
		`dtoxog` : D-ToxoG executable. Default: `params.dtoxog`
		`nthread`: Maximum threads used by matlab. Default: `1`
		`params` : Other parameters for `startFilterMAFFile`.
			- `isGeneratingPlots`: Default: `True`
			- `globalPoxoG`: Default: `0.96`
			- See more in `startFilterMAFFile.m`
	"""
	pDToxoG              = Proc(desc = 'Run D-ToxoG on MAF files.')
	pDToxoG.input        = 'infile:file'
	pDToxoG.output       = 'outfile:file:{{i.infile | fn}}.dtoxog.maf'
	pDToxoG.args.nthread = 1
	pDToxoG.args.dtoxog  = params.dtoxog.value
	pDToxoG.args.params  = Box(isGeneratingPlots = True, globalPoxoG = .96)
	pDToxoG.lang         = params.python.value
	pDToxoG.script       = "file:scripts/vcfnext/pDToxoG.py"
	return pDToxoG

